"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

# Import Path for working with file system paths
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# BASE_DIR points to the root directory of our Django project
# __file__ is this settings.py file, .parent.parent goes up two levels
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# This key is used for cryptographic signing - change it in production!
SECRET_KEY = 'django-insecure-dg$)d@mg2obt!6cgan$scr@v1f)@nvw*%af+$c2u_c9@4f3!0y'

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG=True shows detailed error pages and serves static files
DEBUG = True

# List of host/domain names that this Django site can serve
# Empty list means only localhost is allowed in DEBUG mode
ALLOWED_HOSTS = []


# Application definition
# List of all Django applications that are activated in this project
INSTALLED_APPS = [
    'django.contrib.admin',        # Django admin interface
    'django.contrib.auth',         # Authentication system
    'django.contrib.contenttypes', # Content type framework
    'django.contrib.sessions',     # Session framework
    'django.contrib.messages',     # Messaging framework
    'django.contrib.staticfiles',  # Static file management
    'miniblog',                    # Our custom blog application
]

# Middleware components that process requests and responses
# Order matters! Each middleware processes requests top-to-bottom, responses bottom-to-top
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',        # Security enhancements
    'django.contrib.sessions.middleware.SessionMiddleware', # Session handling
    'django.middleware.common.CommonMiddleware',            # Common functionality
    'django.middleware.csrf.CsrfViewMiddleware',           # CSRF protection
    'django.contrib.auth.middleware.AuthenticationMiddleware', # User authentication
    'django.contrib.messages.middleware.MessageMiddleware',    # Flash messages
    'django.middleware.clickjacking.XFrameOptionsMiddleware',  # Clickjacking protection
]

# The main URL configuration module
# This tells Django where to find the root URL patterns
ROOT_URLCONF = 'config.urls'

# Template engine configuration
TEMPLATES = [
    {
        # Use Django's built-in template engine
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],  # Additional directories to search for templates
        'APP_DIRS': True,  # Look for templates in each app's templates/ directory
        'OPTIONS': {
            # Context processors add variables to every template context
            'context_processors': [
                'django.template.context_processors.request',  # Adds 'request' to templates
                'django.contrib.auth.context_processors.auth', # Adds 'user' to templates
                'django.contrib.messages.context_processors.messages', # Adds 'messages'
            ],
        },
    },
]

# WSGI application used by Django's development server and production WSGI deployments
WSGI_APPLICATION = 'config.wsgi.application'


# Database configuration
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases
# We're using SQLite for development - it's simple and requires no setup
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',  # SQLite database engine
        'NAME': BASE_DIR / 'db.sqlite3',         # Database file location
    }
}


# Password validation rules
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators
# These validators ensure users create secure passwords
AUTH_PASSWORD_VALIDATORS = [
    {
        # Prevents passwords too similar to user information
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        # Enforces minimum password length (default: 8 characters)
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        # Prevents common passwords like 'password123'
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        # Prevents purely numeric passwords
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization settings
# https://docs.djangoproject.com/en/5.2/topics/i18n/

# Default language for the site
LANGUAGE_CODE = 'en-us'

# Default timezone for the site
TIME_ZONE = 'UTC'

# Enable Django's translation system
USE_I18N = True

# Enable timezone-aware datetime handling
USE_TZ = True


# Static files configuration (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/
# URL prefix for static files (e.g., /static/css/style.css)
STATIC_URL = 'static/'

# Default primary key field type for models
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field
# Uses 64-bit integers for primary keys
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
